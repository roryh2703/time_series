## Consider using a non-linear trend (in this case, quadratic).
tt2 = tt^2
fit2 = lm(ap ~ tt + tt2)
trend2 = fitted(fit2)
trend2 = ts(trend2, start=start(ap), end=end(ap), frequency=frequency(ap))
resid2 = ts(residuals(fit2), start=start(ap), end=end(ap),
frequency=frequency(ap))
plot(resid2)
## Consider using a non-linear trend (in this case, quadratic).
tt2 = tt^2
fit2 = lm(ap ~ tt2)
trend2 = fitted(fit2)
trend2 = ts(trend2, start=start(ap), end=end(ap), frequency=frequency(ap))
resid2 = ts(residuals(fit2), start=start(ap), end=end(ap),
frequency=frequency(ap))
plot(resid2)
## Consider using a non-linear trend (in this case, quadratic).
tt2 = tt^2
fit2 = lm(ap ~ tt + tt2)
trend2 = fitted(fit2)
trend2 = ts(trend2, start=start(ap), end=end(ap), frequency=frequency(ap))
resid2 = ts(residuals(fit2), start=start(ap), end=end(ap),
frequency=frequency(ap))
plot(resid2)
jan
feb
setwd("/usr/not-backed-up/time_series/practical_1")
load("data/pond.RData")
start(X)
end(X)
frequency(X)
class(X)    #check class of data: 'ts'
#    simple stats
summary(X); mean(X); var(X); sd(X)
#    plot data
jpeg('plots/plot_data.jpg')
plot(X, xlab="Year", ylab="Monthly water levels (ft)")
dev.off()
## Fit a linear trend
tt = 1:length(X)
fit1 = lm(X~tt)
trend1 = fitted(fit1) # trend as a vector; convert it to a "ts" object
trend1 = ts(trend1, start=start(X), end=end(X), frequency=frequency(X))
## Superimpose on time series plot
lines(trend1, col="blue")
## Find and plot residuals
resid1 = ts(residuals(fit1), start=start(X), end=end(X),
frequency=frequency(X))
jpeg('plots/plot_data_residuals.jpg')
plot(resid1, ylab="Residuals")
dev.off()
## Create dummy variables for each month
n = length(X)
jan = as.numeric((1:n %% 12) == 1)
feb = as.numeric((1:n %% 12) == 2)
mar = as.numeric((1:n %% 12) == 3)
apr = as.numeric((1:n %% 12) == 4)
may = as.numeric((1:n %% 12) == 5)
jun = as.numeric((1:n %% 12) == 6)
jul = as.numeric((1:n %% 12) == 7)
aug = as.numeric((1:n %% 12) == 8)
sep = as.numeric((1:n %% 12) == 9)
oct = as.numeric((1:n %% 12) == 10)
nov = as.numeric((1:n %% 12) == 11)
dec = as.numeric((1:n %% 12) == 0)
## Fit model to our residuals using the dummy variables
fit2 = lm(resid1 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit2
## So, for example, log sales are typically 0.08 below the trend in January;
## 0.02 above the trend in March etc.
## Now see what variation is left after removal of trend and seasonal effects.
seasonal = ts(fitted(fit2), start=start(X), end=end(X),
frequency=frequency(X))
fv = trend1 + seasonal
resid5 = X - fv
par(mfrow=c(2,1))
plot(X, ylab="...")
lines(fv, col="blue")
############################################
plot(resid5, ylab="Residuals")
## literature; see, eg, Cowpertwaite & Metcalfe pp4
## Monthly airline bookings (in 1000s) from Pan Am in USA from 1949-1960
data(AirPassengers)
ap = AirPassengers
ap
class(ap) # a "time series" object in R
## Characteristics of a time series
start(ap)      # start date
end(ap)        # end date
frequency(ap)  # number of observations per "main time unit" (ie year)
## Time series plot
plot(ap, ylab="Airline bookings (1000s)")
## Fit a linear trend
tt = 1:length(ap) # don't use "t" as it is a function in R!
fit1 = lm(ap~tt)
trend1 = fitted(fit1) # trend as a vector; convert it to a "ts" object
trend1 = ts(trend1, start=start(ap), end=end(ap), frequency=frequency(ap))
## Superimpose on time series plot
lines(trend1, col="blue")
## Find and plot residuals
resid1 = ts(residuals(fit1), start=start(ap), end=end(ap),
frequency=frequency(ap))
plot(resid1, ylab="Residuals")
setwd("/usr/not-backed-up/time_series/practical_1")
load("data/pond.RData")
start(X)
end(X)
frequency(X)
class(X)    #check class of data: 'ts'
#    simple stats
summary(X); mean(X); var(X); sd(X)
#    plot data
jpeg('plots/plot_data.jpg')
plot(X, xlab="Year", ylab="Monthly water levels (ft)")
dev.off()
plot(resid5, ylab="Residuals")
frequency(resid5)
frequency(X)
## Fit model AGAIN to our residuals using the dummy variables
fit3 = lm(resid2 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit3
## Fit model to our residuals using the dummy variables
fit2 = lm(resid1 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit2
plot(resid2, ylab="Residuals")
#Practical 1 code
#24nd February 2017
#Rory Hetherington
setwd("/usr/not-backed-up/time_series/practical_1")
load("data/pond.RData")
start(X)
end(X)
frequency(X)
class(X)    #check class of data: 'ts'
#    simple stats
summary(X); mean(X); var(X); sd(X)
#    plot data
jpeg('plots/plot_data.jpg')
plot(X, xlab="Year", ylab="Monthly water levels (ft)")
dev.off()
################################################
## Fit a linear trend
tt = 1:length(X)
fit1 = lm(X~tt)
trend1 = fitted(fit1) # trend as a vector; convert it to a "ts" object
trend1 = ts(trend1, start=start(X), end=end(X), frequency=frequency(X))
## Superimpose on time series plot
lines(trend1, col="blue")
## Find and plot residuals
resid1 = ts(residuals(fit1), start=start(X), end=end(X),
frequency=frequency(X))
jpeg('plots/plot_data_residuals.jpg')
plot(resid1, ylab="Residuals")
dev.off()
###############################################
## Fit seasonal effect
## Create dummy variables for each month
n = length(X)
jan = as.numeric((1:n %% 12) == 1)
feb = as.numeric((1:n %% 12) == 2)
mar = as.numeric((1:n %% 12) == 3)
apr = as.numeric((1:n %% 12) == 4)
may = as.numeric((1:n %% 12) == 5)
jun = as.numeric((1:n %% 12) == 6)
jul = as.numeric((1:n %% 12) == 7)
aug = as.numeric((1:n %% 12) == 8)
sep = as.numeric((1:n %% 12) == 9)
oct = as.numeric((1:n %% 12) == 10)
nov = as.numeric((1:n %% 12) == 11)
dec = as.numeric((1:n %% 12) == 0)
## Fit model to our residuals using the dummy variables
fit2 = lm(resid1 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit2
## So, for example, log sales are typically 0.08 below the trend in January;
## 0.02 above the trend in March etc.
## Now see what variation is left after removal of trend and seasonal effects.
seasonal = ts(fitted(fit2), start=start(X), end=end(X),
frequency=frequency(X))
fv = trend1 + seasonal
resid2 = X - fv
par(mfrow=c(2,1))
plot(X, ylab="...")
lines(fv, col="blue")
############################################
plot(resid2, ylab="Residuals")
## Fit model to our residuals using the dummy variables
fit2 = lm(resid1 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit2
Y = resid2
plot(resid2, ylab="Residuals")
plot(Y, ylab="Residuals")
par(mfrow=c(2,1))
plot(X, ylab="...")
lines(fv, col="blue")
par(mfrow=c(2,1))
plot(X)
lines(fv, col="blue")
jpeg('plots/plot_data_residuals.jpg')
plot(Y, ylab="Residuals")
dev.off()
n = 100
## First, consider non-stationary AR(1), alpha = 1
plot(0,0,xlim=c(0,100), ylim=c(-30, 30), xlab="Time",  ylab="Xt", type="n",
main="AR(1), alpha = 1")
for(i in 1:100){
eps = rnorm(n=n, mean=0, sd=1) # white noise
ar1 = ts(cumsum(c(0, eps))) # not stationary
lines(ar1)
}
## Now consider AR(1) with different values of alpha = 0.99, 0.5, 0.01
par(mfcol=c(2,3))
for(alpha in c(0.99, 0.5, 0.01)){
ar.process = arima.sim(n=n, model=list(ar=alpha))
plot(ar.process, ylab="Xt", main=paste("AR(1), alpha =", alpha))
acf(ar.process, main="")
}
## Finally increase order, p
## Define alpha_k for k=1,...,9
alpha = ((9:1)/10)^6
alpha
for(p in c(1,5,9)){
ar.process = arima.sim(n=n, model=list(ar=alpha[1:p]))
plot(ar.process, ylab="Xt", main=paste("AR(p), p =", p))
acf(ar.process, main="")
}
n = 100
## First, consider non-stationary AR(1), alpha = 1
plot(0,0,xlim=c(0,100), ylim=c(-30, 30), xlab="Time",  ylab="Xt", type="n",
main="AR(1), alpha = 1")
for(i in 1:100){
eps = rnorm(n=n, mean=0, sd=1) # white noise
ar1 = ts(cumsum(c(0, eps))) # not stationary
lines(ar1)
}
acf(X, main="")
acf(X, main="")
acf(X, main="")
#Practical 1 code
#24nd February 2017
#Rory Hetherington
setwd("/usr/not-backed-up/time_series/practical_1")
load("data/pond.RData")
start(X)
end(X)
frequency(X)
class(X)    #check class of data: 'ts'
#    simple stats
summary(X); mean(X); var(X); sd(X)
#    plot data
jpeg('plots/plot_data.jpg')
plot(X, xlab="Year", ylab="Monthly water levels (ft)")
dev.off()
################################################
## Fit a linear trend
tt = 1:length(X)
fit1 = lm(X~tt)
trend1 = fitted(fit1) # trend as a vector; convert it to a "ts" object
trend1 = ts(trend1, start=start(X), end=end(X), frequency=frequency(X))
## Superimpose on time series plot
lines(trend1, col="blue")
## Find and plot residuals
resid1 = ts(residuals(fit1), start=start(X), end=end(X),
frequency=frequency(X))
jpeg('plots/plot_data_residuals.jpg')
plot(resid1, ylab="Residuals")
dev.off()
###############################################
## Fit seasonal effect
## Create dummy variables for each month
n = length(X)
jan = as.numeric((1:n %% 12) == 1)
feb = as.numeric((1:n %% 12) == 2)
mar = as.numeric((1:n %% 12) == 3)
apr = as.numeric((1:n %% 12) == 4)
may = as.numeric((1:n %% 12) == 5)
jun = as.numeric((1:n %% 12) == 6)
jul = as.numeric((1:n %% 12) == 7)
aug = as.numeric((1:n %% 12) == 8)
sep = as.numeric((1:n %% 12) == 9)
oct = as.numeric((1:n %% 12) == 10)
nov = as.numeric((1:n %% 12) == 11)
dec = as.numeric((1:n %% 12) == 0)
## Fit model to our residuals using the dummy variables
fit2 = lm(resid1 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit2
## So, for example, log sales are typically 0.08 below the trend in January;
## 0.02 above the trend in March etc.
## Now see what variation is left after removal of trend and seasonal effects.
seasonal = ts(fitted(fit2), start=start(X), end=end(X),
frequency=frequency(X))
fv = trend1 + seasonal
resid2 = X - fv
Y = resid2
par(mfrow=c(2,1))
plot(X, ylab="...")
lines(fv, col="blue")
############################################
jpeg('plots/plot_data_residuals.jpg')
plot(Y, ylab="Residuals Y")
dev.off()
############################################    ACF model
acf(X, main="")
#Practical 1 code
#24nd February 2017
#Rory Hetherington
setwd("/usr/not-backed-up/time_series/practical_1")
load("data/pond.RData")
start(X)
end(X)
frequency(X)
class(X)    #check class of data: 'ts'
#    simple stats
summary(X); mean(X); var(X); sd(X)
#    plot data
jpeg('plots/plot_data.jpg')
plot(X, xlab="Year", ylab="Monthly water levels (ft)")
dev.off()
################################################
## Fit a linear trend
tt = 1:length(X)
fit1 = lm(X~tt)
trend1 = fitted(fit1) # trend as a vector; convert it to a "ts" object
trend1 = ts(trend1, start=start(X), end=end(X), frequency=frequency(X))
## Superimpose on time series plot
lines(trend1, col="blue")
## Find and plot residuals
resid1 = ts(residuals(fit1), start=start(X), end=end(X),
frequency=frequency(X))
jpeg('plots/plot_data_residuals.jpg')
plot(resid1, ylab="Residuals")
dev.off()
###############################################
## Fit seasonal effect
## Create dummy variables for each month
n = length(X)
jan = as.numeric((1:n %% 12) == 1)
feb = as.numeric((1:n %% 12) == 2)
mar = as.numeric((1:n %% 12) == 3)
apr = as.numeric((1:n %% 12) == 4)
may = as.numeric((1:n %% 12) == 5)
jun = as.numeric((1:n %% 12) == 6)
jul = as.numeric((1:n %% 12) == 7)
aug = as.numeric((1:n %% 12) == 8)
sep = as.numeric((1:n %% 12) == 9)
oct = as.numeric((1:n %% 12) == 10)
nov = as.numeric((1:n %% 12) == 11)
dec = as.numeric((1:n %% 12) == 0)
## Fit model to our residuals using the dummy variables
fit2 = lm(resid1 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit2
## So, for example, log sales are typically 0.08 below the trend in January;
## 0.02 above the trend in March etc.
## Now see what variation is left after removal of trend and seasonal effects.
seasonal = ts(fitted(fit2), start=start(X), end=end(X),
frequency=frequency(X))
fv = trend1 + seasonal
resid2 = X - fv
Y = resid2
par(mfrow=c(2,1))
plot(X, ylab="...")
lines(fv, col="blue")
############################################
jpeg('plots/plot_data_residuals.jpg')
plot(Y, ylab="Residuals Y")
dev.off()
############################################    ACF model
acf(X, main="")
acf(X, main="")
jpeg('plots/plot_acf.jpg')
acf(X, main="")
dev.off()
acf(Y, main="")
## Exploration of airline passengers data, frequently analysed in the
## literature; see, eg, Cowpertwaite & Metcalfe pp4
## Monthly airline bookings (in 1000s) from Pan Am in USA from 1949-1960
data(AirPassengers)
ap = AirPassengers
ap
class(ap) # a "time series" object in R
## Characteristics of a time series
start(ap)      # start date
end(ap)        # end date
frequency(ap)  # number of observations per "main time unit" (ie year)
## Time series plot
plot(ap, ylab="Airline bookings (1000s)")
## Fit a linear trend
tt = 1:length(ap) # don't use "t" as it is a function in R!
fit1 = lm(ap~tt)
trend1 = fitted(fit1) # trend as a vector; convert it to a "ts" object
trend1 = ts(trend1, start=start(ap), end=end(ap), frequency=frequency(ap))
## Superimpose on time series plot
lines(trend1, col="blue")
## Find and plot residuals
resid1 = ts(residuals(fit1), start=start(ap), end=end(ap),
frequency=frequency(ap))
plot(resid1, ylab="Residuals")
## Observe (1) some trend remaining (2) cyclic pattern (3) increasing
## variance.  Clearly, our simplistic linear trend was not sufficient.
## Consider using a non-linear trend (in this case, quadratic).
tt2 = tt^2
fit2 = lm(ap ~ tt + tt2)
trend2 = fitted(fit2)
trend2 = ts(trend2, start=start(ap), end=end(ap), frequency=frequency(ap))
resid2 = ts(residuals(fit2), start=start(ap), end=end(ap),
frequency=frequency(ap))
plot(resid2)
## No remaining evidence of a trend.
## Next, try to deal with the non-constant variance by taking log(X)
log.ap = log(ap)
fit3 = lm(log.ap ~ tt + tt2)
trend3 = ts(fitted(fit3), start=start(ap), end=end(ap), frequency=frequency(ap))
resid3 = ts(residuals(fit3), start=start(ap), end=end(ap),
frequency=frequency(ap))
par(mfrow=c(2,1))
plot(log(ap), ylab="log Airline bookings (1000s)")
lines(trend3, col="blue")
plot(resid3, ylab="Residuals")
## Finally, fit seasonal effect
## Create dummy variables for each month
n = length(ap)
jan = as.numeric((1:n %% 12) == 1)
feb = as.numeric((1:n %% 12) == 2)
mar = as.numeric((1:n %% 12) == 3)
apr = as.numeric((1:n %% 12) == 4)
may = as.numeric((1:n %% 12) == 5)
jun = as.numeric((1:n %% 12) == 6)
jul = as.numeric((1:n %% 12) == 7)
aug = as.numeric((1:n %% 12) == 8)
sep = as.numeric((1:n %% 12) == 9)
oct = as.numeric((1:n %% 12) == 10)
nov = as.numeric((1:n %% 12) == 11)
dec = as.numeric((1:n %% 12) == 0)
## Fit model to our residuals using the dummy variables
fit4 = lm(resid3 ~ 0 + jan + feb + mar + apr + may + jun + jul + aug +
sep + aug + oct + nov + dec)
fit4
## Now see what variation is left after removal of trend and seasonal effects.
seasonal = ts(fitted(fit4), start=start(ap), end=end(ap),
frequency=frequency(ap))
fv = trend3 + seasonal
resid5 = log.ap - fv
par(mfrow=c(2,1))
plot(log.ap, ylab="log airline bookings (1000s)")
lines(fv, col="blue")
plot(resid5, ylab="Residuals")
par(mfrow=c(1,1))
plot(resid5[-1]~resid5[-n], xlab=expression(Y[t]),
ylab=expression(Y[t+1]), pch=16)
par(mfrow=c(1,1))
acf(X, main="")
jpeg('plots/plot_data_residuals.jpg')
plot(Y, ylab="Residuals Y")
dev.off()
par(mfrow=c(1,1))
jpeg('plots/plot_data_residuals.jpg')
plot(Y, ylab="Residuals Y")
dev.off()
par(mfrow=c(1,1))
plot(Y, ylab="Residuals Y")
plot(Y, ylab="Residuals Y")
par(mfrow=c(1,1))
plot(Y, ylab="Residuals Y")
acf(Y, main="")
par(mfrow=c(1,1))
plot(acf(Y), ylab="Residuals Y")
acf(Y, main="")
par(mfrow=c(1,1))
acf(Y, main="")
dev.off()
par(mfrow=c(1,1))
acf(Y, main="")
par(mfrow=c(1,1))
jpeg('plots/plot_residual_acf.jpg')
plot(acf(Y), ylab="ACF")
dev.off()
par(mfrow=c(1,1))
jpeg('plots/plot_residual_acf.jpg')
plot(acf(Y), ylab="ACF", main="")
dev.off()
checking  = as.numeric((1:n %% 12) == 9)
as.numeric(1:4)
numeric(1:4)
numeric(length=4)
((1:2 %% 4) == 3)
((1:4 %% 4) == 3)
n = 100
par(mfrow=c(4,2), mar=c(4,4,3,0)+0.2)
ma0 = ts(rnorm(n=n))
plot(ma0, ylab="Xt", main="MA(0), white noise"); acf(ma0, main="")
ma1 = arima.sim(n=n, model=list(ma=c(1)))
plot(ma1, ylab="Xt", main="MA(1)"); acf(ma1, main="")
ma3 = arima.sim(n=n, model=list(ma=c(1, .9,.8)))
plot(ma3, ylab="Xt", main="MA(3)"); acf(ma3, main="")
ma10 = arima.sim(n=n, model=list(ma=c(1, .9,.8,.7,.6,.5,.4,.3,.2,.1)))
plot(ma10, ylab="Xt", main="MA(10)"); acf(ma10, main="")
c(4,4,3,0)
mar=c(4,4,3,0)+0.2)
mar=c(4,4,3,0)+0.2
mar
n = 10
ma0 = ts(rnorm(n=n))
ts(rnorm(n=n))
rnorm(3)
rnorm(n)
rnorm(n=n)
